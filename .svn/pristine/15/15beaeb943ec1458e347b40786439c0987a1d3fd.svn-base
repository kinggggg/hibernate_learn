package com.zeek.hibernate.test;

import org.hibernate.FlushMode;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.zeek.hibernate.domain.Customer;
import com.zeek.hibernate.domain.Order;

public class TestFlushMode {

	private static SessionFactory sf = null;
	
	@BeforeClass
	public static void buildSf(){
		Configuration conf = new Configuration();
		conf.addClass(Customer.class);
		conf.addClass(Order.class);
		sf = conf.buildSessionFactory();
	}
	
	@AfterClass
	public static void release(){
		sf.close();
	}
	
	/**
	 * 保存客户
	 */
	@Test
	public void testNever(){ 
		Session session = sf.openSession();
		session.setFlushMode(FlushMode.NEVER);
		Transaction tx = session.beginTransaction();
		Customer c = (Customer) session.load(Customer.class, 2);
		c.setAge(21);
		tx.commit();
		session.close();
	}
	
	@Test
	public void testSaveOrUpdate(){ 
		Session session = sf.openSession();
		Transaction tx = session.beginTransaction();
		Customer c = (Customer) session.load(Customer.class, 2);
		/**
		 * 此时调用save方法是不起任何作用的！因为此时c对象已经处于持久化状态，而save方法的本质就是将临时对象和缓存关联,使其变成持久化状态。
		 * 就算执行了save方法，数据库中也不会
		 * 增加一条记录
		 */
		//session.save(c);
		tx.commit();
		session.close();
	}
	
	@Test
	public void testSaveOrUpdate2(){ 
		Session session = sf.openSession();
		Transaction tx = session.beginTransaction();
		Customer c = (Customer) session.load(Customer.class, 2);
		c.setAge(21);
		/**
		 * 若要更新c对象的age值的话，其实是不用手动调用session的update方法的
		 * 因为此时c对象处于持久化状态，已经位于session一级缓存中。当调用tx.commit()时，会自动将age值这一改变自动更新到数据库。
		 * 因为update方法的本质就是：将游离对象和缓存关联,使其变成持久化状态
		 */
		//session.update(c);
		tx.commit();
		session.close();
	}
}